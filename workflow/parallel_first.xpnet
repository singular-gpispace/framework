<defun name="parallel_first">

  <struct name="option_token_type">
    <field name="function_name" type="string"/>
    <field name="needed_library" type="string"/>
    <field name="in_struct_name" type="string"/>
    <field name="in_struct_desc" type="string"/>
    <field name="out_struct_name" type="string"/>
    <field name="out_struct_desc" type="string"/>
  </struct>

  <struct name="task_token_type">
    <field name="base_filename" type="string"/>
    <field name="id" type="unsigned int"/>
  </struct>

  <struct name="generator_token_type">
    <field name="base_filename" type="string"/>
    <field name="current_count" type="unsigned int"/>
    <field name="total_count" type="unsigned int"/>
  </struct>

  <in name="implementation" type="string" place="implementation"/>
  <in name="base_filename" type="string" place="base_filename"/>
  <in name="function_name" type="string" place="function_name"/>
  <in name="needed_library" type="string" place="needed_library"/>
  <in name="in_struct_name" type="string" place="in_struct_name"/>
  <in name="in_struct_desc" type="string" place="in_struct_desc"/>
  <in name="out_struct_name" type="string" place="out_struct_name"/>
  <in name="out_struct_desc" type="string" place="out_struct_desc"/>
  <in name="task_count" type="unsigned int" place="task_count"/>
  <out name="output" type="unsigned int" place="output"/>
  <net>
    <place name="implementation" type="string"/>
    <place name="base_filename" type="string"/>
    <place name="function_name" type="string"/>
    <place name="needed_library" type="string"/>
    <place name="in_struct_name" type="string"/>
    <place name="in_struct_desc" type="string"/>
    <place name="out_struct_name" type="string"/>
    <place name="out_struct_desc" type="string"/>
    <place name="task_count" type="unsigned int"/>
    <place name="global_options" type="option_token_type"/>
    <place name="generator_state" type="generator_token_type"/>
    <place name="tasks" type="task_token_type"/>
    <place name="result_before" type="task_token_type"/>
    <place name="result_after" type="task_token_type"/>
    <place name="output" type="unsigned int"/>

    <transition name="initialize">
      <defun>
        <in name="base_filename" type="string"/>
        <in name="task_count" type="unsigned int"/>
        <in name="function_name" type="string"/>
        <in name="needed_library" type="string"/>
        <in name="in_struct_name" type="string"/>
        <in name="in_struct_desc" type="string"/>
        <in name="out_struct_name" type="string"/>
        <in name="out_struct_desc" type="string"/>
        <out name="state" type="generator_token_type"/>
        <out name="options" type="option_token_type"/>
        <expression>
          ${state.base_filename} := ${base_filename};
          ${state.current_count} := 0U;
          ${state.total_count} := ${task_count};
          ${options.function_name} := ${function_name};
          ${options.needed_library} := ${needed_library};
          ${options.in_struct_name} := ${in_struct_name};
          ${options.in_struct_desc} := ${in_struct_desc};
          ${options.out_struct_name} := ${out_struct_name};
          ${options.out_struct_desc} := ${out_struct_desc};
        </expression>
      </defun>
      <connect-in port="base_filename" place="base_filename"/>
      <connect-in port="task_count" place="task_count"/>
      <connect-in port="function_name" place="function_name"/>
      <connect-in port="needed_library" place="needed_library"/>
      <connect-in port="in_struct_name" place="in_struct_name"/>
      <connect-in port="in_struct_desc" place="in_struct_desc"/>
      <connect-in port="out_struct_name" place="out_struct_name"/>
      <connect-in port="out_struct_desc" place="out_struct_desc"/>
      <connect-out port="state" place="generator_state"/>
      <connect-out port="options" place="global_options"/>
    </transition>

    <transition name="extract">
      <defun>
        <inout name="state" type="generator_token_type"/>
        <out name="task" type="task_token_type"/>
        <condition>
          ${state.current_count} :lt: ${state.total_count}
        </condition>
        <expression>
          ${task.base_filename} := ${state.base_filename};
          ${task.id} := ${state.current_count};
          ${state.current_count} := ${state.current_count} + 1U;
        </expression>
      </defun>
      <connect-inout port="state" place="generator_state"/>
      <connect-out port="task" place="tasks"/>
    </transition>

    <transition name="done_extract">
      <defun>
        <in name="state" type="generator_token_type"/>
        <condition>
          ${state.current_count} :eq: ${state.total_count}
        </condition>
        <expression>
        </expression>
      </defun>
      <connect-in port="state" place="generator_state"/>
    </transition>

    <transition name="compute">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="in" type="task_token_type"/>
        <in name="implementation" type="string"/>
        <in name="options" type="option_token_type"/>
        <out name="out" type="task_token_type"/>
        <module name="singular_parallel_first" function="compute (implementation,
          options, in, out)" eureka-group="wait_first"
          pass_context="true">
          <cinclude href="share/include/waitallfirst_interface.hpp"/>
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <cinclude href="iostream"/>
          <code><![CDATA[
          std::cout << "in compute" << std::endl;
          try
          {
            _pnetc_context->execute_and_kill_on_cancel_DO_NOT_OUTPUT_TO_STANDARD_STREAMS_FROM_WITHIN
              ( [implementation, in, options]()
                {
                  const std::string in_filename (in.base_filename + ".i" + std::to_string (in.id));          
                  const std::string out_filename (in.base_filename + ".o" + std::to_string (in.id));
                  fhg::util::scoped_dlhandle
                    (implementation, RTLD_GLOBAL | RTLD_NOW | RTLD_DEEPBIND)
                    .sym<decltype (singular_parallel_compute)> ("singular_parallel_compute")
                      ( options.function_name, options.needed_library
                      , in_filename, out_filename
                      , options.in_struct_name, options.in_struct_desc
                      , options.out_struct_name, options.out_struct_desc
                      );
                },
                &drts::worker::throw_cancelled,
                &drts::worker::on_signal_unexpected,
                [] (int i)
                {
                  if (i)
                  {
                    drts::worker::on_exit_unexpected (i);
                  }
                }
              )
              ;
          }
          catch (drts::worker::context::cancelled const&)
          {
            std::cout << "task has been cancelled" << std::endl;
          }
          out = in;
          ]]></code>
        </module>
      </defun>
      <connect-in port="in" place="tasks"/>
      <connect-read port="implementation" place="implementation"/>
      <connect-read port="options" place="global_options"/>
      <connect-out port="out" place="result_before"/>
    </transition>

    <transition name="got_an_event_eureka">
      <defun>
        <in name="result_before" type="task_token_type"/>
        <out name="result_after" type="task_token_type"/>
        <out name="eureka_good" type="set"/> <!-- eureka, ID inserted for WE -->
        <expression>
          ${eureka_good} := set_insert (Set{}, "wait_first");
          ${result_after} := ${result_before};
        </expression>
      </defun>
      <connect-in port="result_before" place="result_before"/>
      <connect-out port="result_after" place="result_after"/>
      <connect-eureka port="eureka_good"/>
    </transition>

    <transition name="finish">
      <defun>
        <in name="result_after" type="task_token_type"/>
        <in name="options" type="option_token_type"/>
        <in name="implementation" type="string"/>
        <out name="output" type="unsigned int"/>
        <expression>
          ${output} := ${result_after.id};
        </expression>
      </defun>
      <connect-in port="result_after" place="result_after"/>
      <connect-in port="options" place="global_options"/>
      <connect-in port="implementation" place="implementation"/>
      <connect-out port="output" place="output"/>
    </transition>

  </net>
</defun>
