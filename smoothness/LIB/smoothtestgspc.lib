///////////////////////////////////////
version="version smoothtestgspc.lib 0.3 Jun_2021 ";
category="Algebraic geometry";
info="
LIBRARY: smoothtestgspc.lib  smoothness test with GPI-Space

OVERVIEW:
This library contains SINGULAR procedures for the parallel smoothness test of the Singular/GPI-Space framework.

TYPES:
configToken            general configuration token type
gspcConfigToken        configuration token for GPI-Space
smoothtestConfigToken  configuration token for the transition procedure

PROCEDURES:
configure_gspc()                           generates standard config token for GPI-Space
configure_smoothtest()                     generates standard config token for the smoothness test
smoothtest(ideal,configToken,configToken)  call the smoothness test
";

proc mod_init()
{
  LIB "libSINGULAR-smoothness-module.so";
  newstruct("configToken", "string tokentype, def options");
  newstruct("gspcConfigToken", "string tmpdir, string nodefile, int procspernode, string rifstrategy, string loghost, int logport, list addargs, string loghostfile");
  newstruct("smoothtestConfigToken", "int projective, int codimlimit, int descrndcoeffmax, int descrndtries, int descmaxzerotries, int splitheuristicsoptions, int logginglevel");
}

proc configure_gspc()
"USAGE: configure_gspc()
RETURN: a configToken containing a gspcConfigToken with the standard configuration for GPI-Space
"
{
  gspcConfigToken gc;
  gc.rifstrategy = "ssh";
  configToken ct;
  ct.tokentype = "gspcConfigToken";
  ct.options = gc;
  return(ct);
}

proc configure_smoothtest()
"USAGE: configure_smoothtest()
RETURN: a configToken containing a smoothtestConfigToken with a default configuration for the
smoothness test
"
{
  smoothtestConfigToken sc;
  sc.descrndcoeffmax = 10;
  sc.splitheuristicsoptions = 3;
  sc.logginglevel = 3;
  configToken ct;
  ct.tokentype = "smoothtestConfigToken";
  ct.options = sc;
  return(ct);
}

proc smoothtest(ideal I, configToken gc, configToken sc)
"USAGE: smoothtest(I, gc, sc); I ideal, gc configToken, sc configToken
RETURN: 1 if the variety defined by I is smooth, 0 if not
NOTE: The configTokens in the second and third argument must contain a gspcConfigToken and,
respectively, a smoothtestConfigToken.
"
{
  if ((typeof(gc.options) != "gspcConfigToken") || (typeof(sc.options) != "smoothtestConfigToken"))
  {
    ERROR("wrong config token types");
  }
  if (gc.options.logport != 0) // logging requested
  {
    if (gc.options.loghost == "") // no hostname given, so read from file
    {
      if (gc.options.loghostfile == "")
      {
        ERROR("logging requested, no loghost and no loghostfile given");
      }
      string loghost = read(gc.options.loghostfile);
      if ((loghost == "") || (loghost == newline))
      {
        ERROR("no hostname in loghostfile");
      }
      if (loghost[size(loghost)] == newline) // delete trailing LF
      {
        loghost = loghost[1..(size(loghost)-1)];
      }
      gc.options.loghost = loghost;
    }
    list logopt = list("--log-host", gc.options.loghost, "--log-port", string(gc.options.logport));
    gc.options.addargs = gc.options.addargs + logopt;
  }
  if (system("getenv", "LD_LIBRARY_PATH") != "")
  {
    list ldpathopt = list("--worker-env-copy-variable", "LD_LIBRARY_PATH");
    gc.options.addargs = gc.options.addargs + ldpathopt;
  }
  string tmpdir;
  if (gc.options.tmpdir[1] == "/")
  {
    tmpdir = gc.options.tmpdir;
  }
  else
  {
    tmpdir = system("getenv", "PWD") + "/" + gc.options.tmpdir;
  }
  def sm_result = gspc_smoothtest(I, sc.options.projective, sc.options.codimlimit, tmpdir, gc.options.nodefile, gc.options.procspernode, gc.options.rifstrategy, sc.options.descrndcoeffmax, sc.options.descrndtries, sc.options.descmaxzerotries, sc.options.splitheuristicsoptions, sc.options.logginglevel, gc.options.addargs);
  return(sm_result);
}
